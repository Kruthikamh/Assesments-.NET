1. Implement an abstract class "Shape" with abstract methods for calculating area and
perimeter. Create three subclasses (e.g., Circle, Rectangle, Triangle) that inherit from
Shape and provide their own implementations for these methods. Demonstrate
polymorphism by creating an array of Shapes and calculating the total area and
perimeter.


Shape.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Assesment
{
    // abstract class which will hide internal details and display required only Its a base class
    public abstract class Shape
    {
        public abstract double CalculateArea();
        public abstract double CalculatePerimeter();
    }
    //the circle is the derived class from shape 
    public class Circle : Shape
    {
        private double Radius { get; set; }// properties
        public Circle(double radius)//constructor
        {
            this.Radius = radius;
        }

        public override double CalculateArea()// ovveriding the declared abstract method in base class
        {
            return Math.PI * Radius * Radius;

        }
        public override double CalculatePerimeter()// ovveriding the declared abstract method in base class
        {
            return 2*Math.PI*Radius;
        }

    }
    public class Rectangle : Shape//dervied class
    {
        private double Width { get; set; }//properties
        private double Height { get; set; }//properties

        public Rectangle(double width, double height)// parameterized constructor
        {
            Width = width;
            Height = height;

        }
        public override double CalculateArea()
        {
            return Width * Height;


        }
        public override double CalculatePerimeter()
        {
            return 2*(Width+Height);
        }
    }
        public class Triangle : Shape//derived class
        {
            private double A { get; set; }//properties 
            private double B { get; set; }//properties
            private double C { get; set; }//properties

            public Triangle(double a, double b, double c) //constructor
            {
                this.A = a;

                this.B = b;
                this.C = c;
            }
            public override double CalculateArea()
            {
                double s = (A + B+ C) / 2;
            return s*s;
            }
            public override double CalculatePerimeter()
            {
                //throw new NotImplementedException();
                return A + B + C;
            }




        }
}



2. Create a scenario where you need to model a "Person" class with properties like
Name, Age, and Address. Implement multiple interfaces (e.g., IDriver, IStudent,
IEmployee) to represent different roles that a person can have. Create a class that
inherits from Person and implements multiple interfaces, showcasing multiple
inheritance through interfaces.


Person.cs


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assesment
{
    // this is class person which is base class
    class Person
    {
        public string Name { get; set; } //properties
        public string designation { get; set; }
        public int Empid{ get; set; }
    }

    // here creating the interface for the properties created for
    interface IDriver
    {
        void Drive();// interface created with void later we can inherit the properties from parent class
    }

    interface IStudent
    {
        void Study();
    }

    interface IEmployee
    {
        void Work();
    }

    //this is mutiple interface inherit the person
    class Result : Person, IDriver,IEmployee,IStudent
    {
        public void Study()
        {
            Console.WriteLine($"{Name} is Learning");
            Console.WriteLine($"{designation} in bangolore");
            Console.WriteLine($"{Empid} is employee id of {Name}");
        }

        public void Work()
        {
            Console.WriteLine($"{Name} is Working in ICS");
            Console.WriteLine($"{designation} in bangolore");
            Console.WriteLine($"{Empid} is employee id of {Name}");
        }

        public void Drive()
        {
            Console.WriteLine($"{Name} knows to drive car");
            Console.WriteLine($"{designation} in bangolore");
            Console.WriteLine($"{Empid} is employee id of {Name}");
        }
    }
}


4. Build a generic collection to manage a library's inventory of books. Create a class
"Book" with properties like Title, Author, and ISBN. Implement a generic collection
(e.g., List<Book>) to add, remove, search, and display books. Utilize generics to
ensure type safety and efficient data management.

Book.cs


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;


namespace Assesment
{
   

    public class Book
    {
        public string Title { get; set; }
        public string Author { get; set; }
        public string ISBN { get; set; }
        public Book() { }
// in this oveeride the string method if we take int for isbn it will ask to convert to string so here we ovveride to tostring method 
       public override string ToString()
       {
          return $"{Title} by {Author} (ISBN: {ISBN})";
        }
    }
    // this is library class in which we used generic og list<book>
    public class Library
    {
        private List<Book> books;

        public Library()
        {
            books = new List<Book>();
        }
        // adding book class properties to have title,author,isbn
        public void AddBook(Book book)
        {
            books.Add(book);
        }

        public void RemoveBook(Book book)
        {
            books.Remove(book);
        }

        public Book SearchBook(string isbn)
        {
            return books.Find(book => book.ISBN == isbn);
        }
        //here for each is used to display all the books from the array which have books
        public void DisplayBooks()
        {
            foreach (var bk in books)
            {
                Console.WriteLine(bk.ToString());
            }
        }
    }

}







program.cs





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assesment
{
      public class Program
    {
        static void Main(string[] args)
        {
            


            //Person();
           // Shape();



            // Book();
        }

        private static void Book()
        {
            Library library = new Library();

            // Add book
            library.AddBook(new Book { Title = "My Soul", Author = "RKB", ISBN = "09876435" });
            library.AddBook(new Book { Title = "My Happiness", Author = "HGR", ISBN = "8665421467" });

            // Displaying books

            library.DisplayBooks();

            // Search
            Console.WriteLine("Search book:");
            Book booking = library.SearchBook("09876435");
            if (booking != null)
                Console.WriteLine("Book found");
            else
                Console.WriteLine("Book not found");

            // Removing a book
            Console.WriteLine("\nRemove it");
            library.RemoveBook(booking);


            Console.ReadLine();
        }

        private static void Person()
        {
            //taking the name from user if required
            Console.WriteLine("\n What is ur name");
            string Name = Console.ReadLine();
            Console.WriteLine(Name);

            // object intailizing
            Result person = new Result
            {
                Name = "Kruthika",
                designation = "Software learner",
                Empid = 1033344,


            };

            person.Study(); //this are the interface method that are inherited from base class person
            person.Work();
            person.Drive();
            Console.ReadLine();
        }

        private static void Shape()
        {// creating a object with object intailizing within it
            Shape[] shapes = {
                new Circle(5),
               new Rectangle(4,6),
                 new Triangle(1,2,3)};

            double Area = 0;
            double perimeter = 0;


            foreach (var shape in shapes)
            {
            Area = Area + shape.CalculateArea();
            perimeter = perimeter + shape.CalculatePerimeter();
            }
            //Program.Shape();
            
            
            Console.WriteLine($"total area:{Area}");
            Console.WriteLine($"total perimeter:{perimeter}");
            Console.ReadLine();
        }
    }
}
